/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package io.github.jeddict.ai.settings;

import static io.github.jeddict.ai.models.Constant.DEEPINFRA_URL;
import static io.github.jeddict.ai.models.Constant.DEEPSEEK_URL;
import io.github.jeddict.ai.models.GPT4AllModelFetcher;
import io.github.jeddict.ai.models.GroqModelFetcher;
import io.github.jeddict.ai.models.OllamaModelFetcher;
import io.github.jeddict.ai.models.LMStudioModelFetcher;
import io.github.jeddict.ai.scanner.ProjectClassScanner;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import static io.github.jeddict.ai.settings.GenAIModel.MODELS;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URI;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;

final class AIAssistancePanel extends javax.swing.JPanel {

    private final AIAssistanceOptionsPanelController controller;

    AIAssistancePanel(AIAssistanceOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        providersPane = new javax.swing.JLayeredPane();
        providerParentPane = new javax.swing.JLayeredPane();
        providerPane = new javax.swing.JLayeredPane();
        providerLabel = new javax.swing.JLabel();
        providerComboBox = new javax.swing.JComboBox<>();
        providerLocationPane = new javax.swing.JLayeredPane();
        providerLocationLabel = new javax.swing.JLabel();
        providerLocationField = new javax.swing.JTextField();
        apiKeyPane = new javax.swing.JLayeredPane();
        apiKeyLabelPane = new javax.swing.JLayeredPane();
        apiKeyLabel = new javax.swing.JLabel();
        apiKeyInfo = new javax.swing.JLabel();
        apiKeyField = new javax.swing.JPasswordField();
        modelParentPane = new javax.swing.JLayeredPane();
        modelLabelPane = new javax.swing.JLayeredPane();
        gptModelLabel = new javax.swing.JLabel();
        gptModelHelp = new javax.swing.JLabel();
        modelChildPane = new javax.swing.JLayeredPane();
        modelComboBox = new javax.swing.JComboBox<>();
        modelsInfo = new javax.swing.JLabel();
        activationParentPane = new javax.swing.JLayeredPane();
        activationPane = new javax.swing.JLayeredPane();
        aiAssistantActivationCheckBox = new javax.swing.JCheckBox();
        enableHintCheckBox = new javax.swing.JCheckBox();
        enableSmartCodeCheckBox = new javax.swing.JCheckBox();
        askAIPane = new javax.swing.JLayeredPane();
        fileFilterationPane = new javax.swing.JLayeredPane();
        fileExtLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileExtField = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        excludeDirTable = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        enableStreamCheckbox = new javax.swing.JCheckBox();
        excludeJavadocCommentsCheckBox = new javax.swing.JCheckBox();
        inlineCompletionPane = new javax.swing.JLayeredPane();
        classContextPane = new javax.swing.JLayeredPane();
        classContextLabelPane = new javax.swing.JLayeredPane();
        classContextLabel = new javax.swing.JLabel();
        classContextHelp = new javax.swing.JLabel();
        classContextComboBox = new javax.swing.JComboBox<>();
        varContextPane = new javax.swing.JLayeredPane();
        classContextLabelPane1 = new javax.swing.JLayeredPane();
        varContextLabel = new javax.swing.JLabel();
        varContextHelp = new javax.swing.JLabel();
        varContextComboBox = new javax.swing.JComboBox<>();
        snippetPane = new javax.swing.JLayeredPane();
        showDescriptionCheckBox = new javax.swing.JCheckBox();
        cachePane = new javax.swing.JLayeredPane();
        cleanDataButton = new javax.swing.JButton();
        hintPane = new javax.swing.JLayeredPane();
        testPromptPane = new javax.swing.JLayeredPane();
        testPromptLabel = new javax.swing.JLabel();
        testPromptField = new javax.swing.JTextField();

        providersPane.setLayout(new java.awt.GridLayout(4, 1));

        providerParentPane.setLayout(new javax.swing.BoxLayout(providerParentPane, javax.swing.BoxLayout.LINE_AXIS));

        providerPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(providerLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLabel.text")); // NOI18N
        providerPane.add(providerLabel);

        providerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(GenAIProvider.values()));
        providerComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerComboBox.toolTipText")); // NOI18N
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerComboBoxActionPerformed(evt);
            }
        });
        providerPane.add(providerComboBox);

        providerParentPane.add(providerPane);

        providerLocationPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(providerLocationLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationLabel.text")); // NOI18N
        providerLocationPane.add(providerLocationLabel);

        providerLocationField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationField.text")); // NOI18N
        providerLocationPane.add(providerLocationField);

        providerParentPane.add(providerLocationPane);

        apiKeyPane.setLayout(new java.awt.GridLayout(0, 1));

        apiKeyLabelPane.setLayout(new java.awt.GridLayout(1, 0));

        org.openide.awt.Mnemonics.setLocalizedText(apiKeyLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyLabel.text")); // NOI18N
        apiKeyLabelPane.add(apiKeyLabel);

        apiKeyInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(apiKeyInfo, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyInfo.text")); // NOI18N
        apiKeyLabelPane.add(apiKeyInfo);

        apiKeyPane.add(apiKeyLabelPane);

        apiKeyField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyField.text")); // NOI18N
        apiKeyField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                apiKeyFieldFocusLost(evt);
            }
        });
        apiKeyPane.add(apiKeyField);

        providerParentPane.add(apiKeyPane);

        providersPane.add(providerParentPane);

        modelParentPane.setLayout(new java.awt.GridLayout(2, 1));

        modelLabelPane.setLayout(new javax.swing.BoxLayout(modelLabelPane, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(gptModelLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.gptModelLabel.text")); // NOI18N
        modelLabelPane.add(gptModelLabel);

        gptModelHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        gptModelHelp.setForeground(new java.awt.Color(100, 100, 100));
        gptModelHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(gptModelHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.gptModelHelp.text")); // NOI18N
        modelLabelPane.add(gptModelHelp);

        modelParentPane.add(modelLabelPane);

        modelChildPane.setLayout(new java.awt.GridLayout(1, 2));

        modelComboBox.setEditable(true);
        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(getModelList((GenAIProvider)providerComboBox.getSelectedItem()).toArray(new String[0])));
        modelComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.modelComboBox.toolTipText")); // NOI18N
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });
        modelChildPane.add(modelComboBox);

        modelsInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(modelsInfo, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.modelsInfo.text")); // NOI18N
        modelChildPane.add(modelsInfo);

        modelParentPane.add(modelChildPane);

        providersPane.add(modelParentPane);

        activationParentPane.setLayout(new java.awt.GridLayout(2, 0));

        activationPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(aiAssistantActivationCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiAssistantActivationCheckBox.text")); // NOI18N
        aiAssistantActivationCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiAssistantActivationCheckBox.toolTipText")); // NOI18N
        aiAssistantActivationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aiAssistantActivationCheckBoxActionPerformed(evt);
            }
        });
        activationPane.add(aiAssistantActivationCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableHintCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableHintCheckBox.text")); // NOI18N
        enableHintCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableHintCheckBox.toolTipText")); // NOI18N
        enableHintCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableHintCheckBoxActionPerformed(evt);
            }
        });
        activationPane.add(enableHintCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableSmartCodeCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableSmartCodeCheckBox.text")); // NOI18N
        enableSmartCodeCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableSmartCodeCheckBox.toolTipText")); // NOI18N
        activationPane.add(enableSmartCodeCheckBox);

        activationParentPane.add(activationPane);

        providersPane.add(activationParentPane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providersPane.TabConstraints.tabTitle"), providersPane); // NOI18N

        askAIPane.setLayout(new javax.swing.BoxLayout(askAIPane, javax.swing.BoxLayout.Y_AXIS));

        fileFilterationPane.setMinimumSize(new java.awt.Dimension(130, 40));
        fileFilterationPane.setPreferredSize(new java.awt.Dimension(125, 200));

        fileExtLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(fileExtLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.fileExtLabel.text")); // NOI18N
        fileExtLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        fileExtLabel.setMinimumSize(new java.awt.Dimension(122, 10));
        fileExtLabel.setPreferredSize(new java.awt.Dimension(122, 20));

        fileExtField.setColumns(20);
        fileExtField.setRows(5);
        fileExtField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.fileExtField.text")); // NOI18N
        jScrollPane3.setViewportView(fileExtField);

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.jLabel1.text")); // NOI18N

        fileFilterationPane.setLayer(fileExtLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        fileFilterationPane.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        fileFilterationPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout fileFilterationPaneLayout = new javax.swing.GroupLayout(fileFilterationPane);
        fileFilterationPane.setLayout(fileFilterationPaneLayout);
        fileFilterationPaneLayout.setHorizontalGroup(
            fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
            .addGroup(fileFilterationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileExtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        fileFilterationPaneLayout.setVerticalGroup(
            fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileFilterationPaneLayout.createSequentialGroup()
                .addGroup(fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileExtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        askAIPane.add(fileFilterationPane);

        jLayeredPane2.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        excludeDirTable.setModel(getExcludeTableModel());
        jScrollPane2.setViewportView(excludeDirTable);

        jLayeredPane2.add(jScrollPane2);

        askAIPane.add(jLayeredPane2);

        jLayeredPane1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 15, 5));

        org.openide.awt.Mnemonics.setLocalizedText(enableStreamCheckbox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableStreamCheckbox.text")); // NOI18N
        enableStreamCheckbox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableStreamCheckbox.toolTipText")); // NOI18N
        jLayeredPane1.add(enableStreamCheckbox);

        org.openide.awt.Mnemonics.setLocalizedText(excludeJavadocCommentsCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeJavadocCommentsCheckBox.text")); // NOI18N
        excludeJavadocCommentsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeJavadocCommentsCheckBox.toolTipText")); // NOI18N
        excludeJavadocCommentsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeJavadocCommentsCheckBoxActionPerformed(evt);
            }
        });
        jLayeredPane1.add(excludeJavadocCommentsCheckBox);

        askAIPane.add(jLayeredPane1);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.askAIPane.TabConstraints.tabTitle"), askAIPane); // NOI18N

        inlineCompletionPane.setLayout(new java.awt.GridLayout(4, 1));

        classContextPane.setPreferredSize(new java.awt.Dimension(125, 75));
        classContextPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        classContextLabelPane.setPreferredSize(new java.awt.Dimension(125, 40));
        classContextLabelPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        classContextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(classContextLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextLabel.text")); // NOI18N
        classContextLabelPane.add(classContextLabel);

        classContextHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        classContextHelp.setForeground(new java.awt.Color(100, 100, 100));
        classContextHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(classContextHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextHelp.text")); // NOI18N
        classContextLabelPane.add(classContextHelp);

        classContextPane.add(classContextLabelPane);

        classContextComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AIClassContext.values()));
        classContextComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextComboBox.toolTipText")); // NOI18N
        classContextComboBox.setPreferredSize(new java.awt.Dimension(72, 35));
        classContextComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classContextComboBoxActionPerformed(evt);
            }
        });
        classContextPane.add(classContextComboBox);

        inlineCompletionPane.add(classContextPane);

        varContextPane.setPreferredSize(new java.awt.Dimension(125, 75));
        varContextPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        classContextLabelPane1.setPreferredSize(new java.awt.Dimension(125, 40));
        classContextLabelPane1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        varContextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(varContextLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextLabel.text")); // NOI18N
        classContextLabelPane1.add(varContextLabel);

        varContextHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        varContextHelp.setForeground(new java.awt.Color(100, 100, 100));
        varContextHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(varContextHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextHelp.text")); // NOI18N
        classContextLabelPane1.add(varContextHelp);

        varContextPane.add(classContextLabelPane1);

        varContextComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AIClassContext.values()));
        varContextComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextComboBox.toolTipText")); // NOI18N
        varContextComboBox.setPreferredSize(new java.awt.Dimension(72, 35));
        varContextComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varContextComboBoxActionPerformed(evt);
            }
        });
        varContextPane.add(varContextComboBox);

        inlineCompletionPane.add(varContextPane);

        snippetPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(showDescriptionCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.showDescriptionCheckBox.text")); // NOI18N
        showDescriptionCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.showDescriptionCheckBox.toolTipText")); // NOI18N
        showDescriptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDescriptionCheckBoxActionPerformed(evt);
            }
        });
        snippetPane.add(showDescriptionCheckBox);

        inlineCompletionPane.add(snippetPane);

        cachePane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        org.openide.awt.Mnemonics.setLocalizedText(cleanDataButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.cleanDataButton.text")); // NOI18N
        cleanDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanDataButtonActionPerformed(evt);
            }
        });
        cachePane.add(cleanDataButton);

        inlineCompletionPane.add(cachePane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.inlineCompletionPane.TabConstraints.tabTitle"), inlineCompletionPane); // NOI18N

        hintPane.setLayout(new java.awt.GridLayout(4, 1));

        testPromptPane.setPreferredSize(new java.awt.Dimension(125, 75));
        testPromptPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        testPromptLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(testPromptLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.testPromptLabel.text")); // NOI18N
        testPromptPane.add(testPromptLabel);

        testPromptField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.testPromptField.text")); // NOI18N
        testPromptPane.add(testPromptField);

        hintPane.add(testPromptPane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.hintPane.TabConstraints.tabTitle"), hintPane); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cleanDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanDataButtonActionPerformed
        ProjectClassScanner.clear();
        JOptionPane.showMessageDialog(this, "Cache has been cleared successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cleanDataButtonActionPerformed

    private void showDescriptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDescriptionCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showDescriptionCheckBoxActionPerformed

    private void varContextComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varContextComboBoxActionPerformed
        AIClassContext selectedContext = (AIClassContext) varContextComboBox.getSelectedItem();
        if (selectedContext != null) {
            varContextHelp.setText(selectedContext.getDescription());
        }
    }//GEN-LAST:event_varContextComboBoxActionPerformed

    private void classContextComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classContextComboBoxActionPerformed
        AIClassContext selectedContext = (AIClassContext) classContextComboBox.getSelectedItem();
        if (selectedContext != null) {
            classContextHelp.setText(selectedContext.getDescription());
        }
    }//GEN-LAST:event_classContextComboBoxActionPerformed

    private void excludeJavadocCommentsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeJavadocCommentsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_excludeJavadocCommentsCheckBoxActionPerformed

    private void enableHintCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableHintCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableHintCheckBoxActionPerformed

    private void aiAssistantActivationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aiAssistantActivationCheckBoxActionPerformed
        // if unchecked then disable the hint and smart checkbox
        if (!aiAssistantActivationCheckBox.isSelected()) {
            enableHintCheckBox.setEnabled(false);
            enableSmartCodeCheckBox.setEnabled(false);
        } else {
            enableHintCheckBox.setEnabled(true);
            enableSmartCodeCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_aiAssistantActivationCheckBoxActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        String selectedContext = (String) modelComboBox.getSelectedItem();
        if (selectedContext != null && getModel(selectedContext) != null) {
            gptModelHelp.setText(getModel(selectedContext).getDescription());
        } else {
            gptModelHelp.setText("");
        }
    }//GEN-LAST:event_modelComboBoxActionPerformed

    private void apiKeyFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apiKeyFieldFocusLost
        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider != null) {
            updateModelComboBox(selectedProvider);
        }
    }//GEN-LAST:event_apiKeyFieldFocusLost

    private void providerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerComboBoxActionPerformed
        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.DEEPINFRA
            || selectedProvider == GenAIProvider.DEEPSEEK
            || selectedProvider == GenAIProvider.GROQ
            || selectedProvider == GenAIProvider.CUSTOM_OPEN_AI) {
            apiKeyLabel.setVisible(true);
            apiKeyField.setVisible(true);
            apiKeyPane.setVisible(true);
            providerLocationLabel.setVisible(true);
            if (selectedProvider == GenAIProvider.DEEPINFRA) {
                providerLocationField.setText(DEEPINFRA_URL);
            } else if (selectedProvider == GenAIProvider.DEEPSEEK) {
                providerLocationField.setText(DEEPSEEK_URL);
            } else if (selectedProvider == GenAIProvider.GROQ) {
                providerLocationField.setText(new GroqModelFetcher().getAPIUrl());
            } else {
                providerLocationField.setText("");
            }
            providerLocationField.setVisible(true);
            providerLocationPane.setVisible(true);
        } else if (selectedProvider == GenAIProvider.GOOGLE
            || selectedProvider == GenAIProvider.OPEN_AI
            || selectedProvider == GenAIProvider.MISTRAL
            || selectedProvider == GenAIProvider.ANTHROPIC) {
            apiKeyLabel.setVisible(true);
            apiKeyField.setVisible(true);
            apiKeyPane.setVisible(true);
            providerLocationLabel.setVisible(false);
            providerLocationField.setText("");
            providerLocationField.setVisible(false);
            providerLocationPane.setVisible(false);
        } else {
            apiKeyLabel.setVisible(false);
            apiKeyField.setVisible(false);
            apiKeyPane.setVisible(false);
            providerLocationLabel.setVisible(true);
            providerLocationField.setVisible(true);
            providerLocationPane.setVisible(true);

            if (null != selectedProvider) {
                switch (selectedProvider) {
                    case OLLAMA ->
                    providerLocationField.setText(new OllamaModelFetcher().getAPIUrl());
                    case LM_STUDIO ->
                    providerLocationField.setText(new LMStudioModelFetcher().getAPIUrl());
                    case GPT4ALL ->
                    providerLocationField.setText(new GPT4AllModelFetcher().getAPIUrl());
                }
            }
        }
        apiKeyField.setText(preferencesManager.getApiKey((GenAIProvider) providerComboBox.getSelectedItem()));
        if (apiKeyLabel.isVisible()
            && selectedProvider != null
            && !selectedProvider.getApiKeyUrl().isEmpty()) {
            String apiKeyUrl = selectedProvider.getApiKeyUrl();
            apiKeyInfo.setText("<html><a href=''>" + apiKeyUrl + "</a></html>");
            apiKeyInfo.setCursor(new Cursor(Cursor.HAND_CURSOR));
            apiKeyInfo.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    try {
                        Desktop.getDesktop().browse(new URI(apiKeyUrl));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    apiKeyInfo.setText("<html><a href=''><span style='color:blue;'>" + apiKeyUrl + "</span></a></html>");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    apiKeyInfo.setText("<html><a href=''>" + apiKeyUrl + "</a></html>");
                }
            });
        }
        if (selectedProvider != null
            && !selectedProvider.getModelInfoUrl().isEmpty()) {
            String modelInfoUrl = selectedProvider.getModelInfoUrl();
            modelsInfo.setText("<html><a href=''>" + modelInfoUrl + "</a></html>");
            modelsInfo.setCursor(new Cursor(Cursor.HAND_CURSOR));
            modelsInfo.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    try {
                        Desktop.getDesktop().browse(new URI(modelInfoUrl));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    modelsInfo.setText("<html><a href=''><span style='color:blue;'>" + modelInfoUrl + "</span></a></html>");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    modelsInfo.setText("<html><a href=''>" + modelInfoUrl + "</a></html>");
                }
            });
        }
        if (selectedProvider != null) {
            updateModelComboBox(selectedProvider);
        }
    }//GEN-LAST:event_providerComboBoxActionPerformed

    private void updateModelComboBox(GenAIProvider selectedProvider) {
        modelComboBox.removeAllItems();
        for (String model : getModelList(selectedProvider)) {
            modelComboBox.addItem(model);
        }
        if (modelComboBox.getItemCount() > 0) {
            modelComboBox.setSelectedIndex(0);
        }
    }

    private List<String> getModelList(GenAIProvider selectedProvider) {
        if (selectedProvider == GenAIProvider.OLLAMA
                && !providerLocationField.getText().isEmpty()) {
            OllamaModelFetcher fetcher = new OllamaModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.LM_STUDIO
                && !providerLocationField.getText().isEmpty()) {
            LMStudioModelFetcher fetcher = new LMStudioModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.GPT4ALL
                && !providerLocationField.getText().isEmpty()) {
            GPT4AllModelFetcher fetcher = new GPT4AllModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.GROQ
                && !providerLocationField.getText().isEmpty()) {
            GroqModelFetcher fetcher = new GroqModelFetcher();
            return fetcher.fetchModels(providerLocationField.getText(), new String(apiKeyField.getPassword()));
        }
        return MODELS.values().stream()
                .filter(model -> model.getProvider().equals(selectedProvider))
                .map(GenAIModel::getName)
                .collect(Collectors.toList());
    }

    private GenAIModel getModel(String modelName) {
        return MODELS.get(modelName);
    }

    private final PreferencesManager preferencesManager = PreferencesManager.getInstance();

    void load() {
        aiAssistantActivationCheckBox.setSelected(preferencesManager.isAiAssistantActivated());
        classContextComboBox.setSelectedItem(preferencesManager.getClassContext());
        varContextComboBox.setSelectedItem(preferencesManager.getVarContext());
        enableHintCheckBox.setSelected(preferencesManager.isHintsEnabled());
        enableSmartCodeCheckBox.setSelected(preferencesManager.isSmartCodeEnabled());

        if (!aiAssistantActivationCheckBox.isSelected()) {
            enableHintCheckBox.setEnabled(false);
            enableSmartCodeCheckBox.setEnabled(false);
        } else {
            enableHintCheckBox.setEnabled(true);
            enableSmartCodeCheckBox.setEnabled(true);
        }

        providerComboBox.setSelectedItem(preferencesManager.getProvider());
        modelComboBox.setSelectedItem(preferencesManager.getModel());
        showDescriptionCheckBox.setSelected(preferencesManager.isDescriptionEnabled());
        fileExtField.setText(preferencesManager.getFileExtensionToInclude());
        enableStreamCheckbox.setSelected(preferencesManager.isStreamEnabled());
        excludeJavadocCommentsCheckBox.setSelected(preferencesManager.isExcludeJavadocEnabled());
        testPromptField.setText(preferencesManager.getTestCasePrompt());

        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.CUSTOM_OPEN_AI
                || selectedProvider == GenAIProvider.DEEPINFRA
                || selectedProvider == GenAIProvider.DEEPSEEK
                || selectedProvider == GenAIProvider.GROQ) {
            apiKeyField.setText(preferencesManager.getApiKey(true));
            providerLocationField.setText(preferencesManager.getProviderLocation());
        } else if (selectedProvider == GenAIProvider.GOOGLE
                || selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.MISTRAL
                || selectedProvider == GenAIProvider.ANTHROPIC) {
            apiKeyField.setText(preferencesManager.getApiKey(true));
        } else if (selectedProvider == GenAIProvider.OLLAMA
                || selectedProvider == GenAIProvider.LM_STUDIO
                || selectedProvider == GenAIProvider.GPT4ALL) {
            providerLocationField.setText(preferencesManager.getProviderLocation());
        }
    }

    void store() {
        preferencesManager.setAiAssistantActivated(aiAssistantActivationCheckBox.isSelected());
        preferencesManager.setClassContext((AIClassContext) classContextComboBox.getSelectedItem());
        preferencesManager.setVarContext((AIClassContext) varContextComboBox.getSelectedItem());
        preferencesManager.setProvider((GenAIProvider) providerComboBox.getSelectedItem());
        preferencesManager.setModel((String) modelComboBox.getSelectedItem());
        preferencesManager.setHintsEnabled(enableHintCheckBox.isSelected());
        preferencesManager.setSmartCodeEnabled(enableSmartCodeCheckBox.isSelected());
        preferencesManager.setDescriptionEnabled(showDescriptionCheckBox.isSelected());
        preferencesManager.setFileExtensionToInclude(fileExtField.getText());
        preferencesManager.setExcludeDirs(getCommaSeparatedValues(excludeTableModel));
        preferencesManager.setStreamEnabled(enableStreamCheckbox.isSelected());
        preferencesManager.setExcludeJavadocEnabled(excludeJavadocCommentsCheckBox.isSelected());
        preferencesManager.setTestCasePrompt(testPromptField.getText());

        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.CUSTOM_OPEN_AI
                || selectedProvider == GenAIProvider.DEEPINFRA
                || selectedProvider == GenAIProvider.DEEPSEEK
                || selectedProvider == GenAIProvider.GROQ) {
            preferencesManager.setApiKey(new String(apiKeyField.getPassword()));
            preferencesManager.setProviderLocation(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.GOOGLE
                || selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.MISTRAL
                || selectedProvider == GenAIProvider.ANTHROPIC) {
            preferencesManager.setApiKey(new String(apiKeyField.getPassword()));
        } else if (selectedProvider == GenAIProvider.OLLAMA
                || selectedProvider == GenAIProvider.LM_STUDIO
                || selectedProvider == GenAIProvider.GPT4ALL) {
            preferencesManager.setProviderLocation(providerLocationField.getText());
        }
    }

    private DefaultTableModel excludeTableModel;

    private DefaultTableModel getExcludeTableModel() {
        excludeDirTable.setDefaultRenderer(Object.class, new CustomTableCellRenderer());
        List<String> excludeDirList = preferencesManager.getExcludeDirList();
        Object[][] excludeDirArray = new Object[excludeDirList.size()][1];

        for (int i = 0; i < excludeDirList.size(); i++) {
            excludeDirArray[i][0] = excludeDirList.get(i);
        }
        excludeTableModel = new DefaultTableModel(
                excludeDirArray,
                new String[]{
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeDir.text")
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                super.setValueAt(aValue, row, column);
                if (row == getRowCount() - 1 && !aValue.toString().isEmpty()) {
                    addRow(new Object[]{""});
                }
            }
        };
        return excludeTableModel;
    }

    private String getCommaSeparatedValues(DefaultTableModel model) {
        StringBuilder sb = new StringBuilder();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            Object value = model.getValueAt(i, 0); // Get the value from the first column
            if (value != null) {
                sb.append(value.toString());
                sb.append(", "); // Append a comma and space except for the last element
            }
        }

        return sb.toString();
    }

    static class CustomTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            // Get the default component
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Set the custom border color
            if (cell instanceof JComponent) {
                JComponent jComponent = (JComponent) cell;

                // Set a border with a custom color
                jComponent.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(225, 225, 225)));  // Red border as an example
            }

            // Return the cell component
            return cell;
        }
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane activationPane;
    private javax.swing.JLayeredPane activationParentPane;
    private javax.swing.JCheckBox aiAssistantActivationCheckBox;
    private javax.swing.JPasswordField apiKeyField;
    private javax.swing.JLabel apiKeyInfo;
    private javax.swing.JLabel apiKeyLabel;
    private javax.swing.JLayeredPane apiKeyLabelPane;
    private javax.swing.JLayeredPane apiKeyPane;
    private javax.swing.JLayeredPane askAIPane;
    private javax.swing.JLayeredPane cachePane;
    private javax.swing.JComboBox<AIClassContext> classContextComboBox;
    private javax.swing.JLabel classContextHelp;
    private javax.swing.JLabel classContextLabel;
    private javax.swing.JLayeredPane classContextLabelPane;
    private javax.swing.JLayeredPane classContextLabelPane1;
    private javax.swing.JLayeredPane classContextPane;
    private javax.swing.JButton cleanDataButton;
    private javax.swing.JCheckBox enableHintCheckBox;
    private javax.swing.JCheckBox enableSmartCodeCheckBox;
    private javax.swing.JCheckBox enableStreamCheckbox;
    private javax.swing.JTable excludeDirTable;
    private javax.swing.JCheckBox excludeJavadocCommentsCheckBox;
    private javax.swing.JTextArea fileExtField;
    private javax.swing.JLabel fileExtLabel;
    private javax.swing.JLayeredPane fileFilterationPane;
    private javax.swing.JLabel gptModelHelp;
    private javax.swing.JLabel gptModelLabel;
    private javax.swing.JLayeredPane hintPane;
    private javax.swing.JLayeredPane inlineCompletionPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLayeredPane modelChildPane;
    private javax.swing.JComboBox<String> modelComboBox;
    private javax.swing.JLayeredPane modelLabelPane;
    private javax.swing.JLayeredPane modelParentPane;
    private javax.swing.JLabel modelsInfo;
    private javax.swing.JComboBox<io.github.jeddict.ai.settings.GenAIProvider> providerComboBox;
    private javax.swing.JLabel providerLabel;
    private javax.swing.JTextField providerLocationField;
    private javax.swing.JLabel providerLocationLabel;
    private javax.swing.JLayeredPane providerLocationPane;
    private javax.swing.JLayeredPane providerPane;
    private javax.swing.JLayeredPane providerParentPane;
    private javax.swing.JLayeredPane providersPane;
    private javax.swing.JCheckBox showDescriptionCheckBox;
    private javax.swing.JLayeredPane snippetPane;
    private javax.swing.JTextField testPromptField;
    private javax.swing.JLabel testPromptLabel;
    private javax.swing.JLayeredPane testPromptPane;
    private javax.swing.JComboBox<AIClassContext> varContextComboBox;
    private javax.swing.JLabel varContextHelp;
    private javax.swing.JLabel varContextLabel;
    private javax.swing.JLayeredPane varContextPane;
    // End of variables declaration//GEN-END:variables
}
